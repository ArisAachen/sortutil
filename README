Sortutil lets you sort an array or slice without implementing a sort.Interface,
and in various orders: ascending, descending, or case-insensitive ascending or
descending (for slices of strings.)

Additionally, Sortutil lets you sort a slice of a custom struct by a given
struct field or index--for example, you can sort a []MyStruct by the structs'
"Name" fields, or a [][]int by the second index of each nested slice.

== Installation
go get github.com/pmylund/sortutil

== Documentation
go doc github.com/pmylund/sortutil

== Examples

=== Normal sorting

ints := []int{4, 7, 2, 6}

// Sort the int slice in descending order, such that
// ints[0] == 7
// ints[1] == 6
// ints[2] == 4
// ints[3] == 2
Sort(slice, nil, Descending)

strings := []string{"ABC", "def", "abc", "GHI"}

// Sort the string slice in case-insensitive ascending order, such that:
// strings[0] == "ABC"
// strings[1] == "abc"
// strings[2] == "def"
// strings[3] == "GHI"

=== Nested sorting

type MyStruct struct {
        Id   int
        Name string
	Date time.Time
}
now := time.Now()
day := 24*time.Hour
slice := []MyStruct{
        {3, "foo", now.Add(1*day)},
        {1, "bar", now.Add(-1*day)},
        {2, "baz", now},
}

// Sort the slice by the Id field in ascending order, such that
// slice[0].Id == 1
// slice[1].Id == 2
// slice[2].Id == 3
Sort(slice, FieldGetter("Id"), Ascending)

// Sort the slice by the Name field in descending order, such that
// slice[0].Name == "foo"
// slice[1].Name == "baz"
// slice[2].Name == "bar"
Sort(slice, FieldGetter("Name"), Descending)

== More information
See http://patrickmylund.com/projects/sortutil
